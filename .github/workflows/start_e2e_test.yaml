name: Start E2E Test

on:
  pull_request:

jobs:
  build-charm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Remove Unnecessary Components
        run: |
          rm -rf .git
          rm -rf .github

      - name: Cache github-runner Charm
        uses: actions/cache@v3
        id: cache-charm
        with:
          path: github-runner_ubuntu-22.04-amd64.charm
          key: github-runner-charm-${{ hashFiles('**/*') }}

      - name: Install charmcraft
        if: steps.cache-charm.outputs.cache-hit != 'true'
        run: sudo snap install charmcraft --classic

      - name: Pack github-runner Charm
        if: steps.cache-charm.outputs.cache-hit != 'true'
        run: charmcraft pack || ( cat /home/ubuntu/.local/state/charmcraft/log/* 1 && exit 1 )

      - name: Upload github-runner Charm
        uses: actions/upload-artifact@v3
        with:
          name: github-runner_ubuntu-22.04-amd64.charm
          path: github-runner_ubuntu-22.04-amd64.charm

  deploy-e2e-test-runner:
    runs-on: [ self-hosted, linux, x64, e2e-test ]
    needs: build-charm
    steps:
      - name: Setup Lxd Controller
        uses: charmed-kubernetes/actions-operator@main
        with:
          juju-channel: 3.1/stable
          provider: lxd

      - name: Create Testing Juju Model
        run: juju add-model testing

      - name: Setting Testing Model Constraints
        run: juju set-model-constraints "virt-type=virtual-machine mem=16G cores=4"

      - name: Change Testing Model Logging Level
        run: juju model-config logging-config="<root>=INFO;unit=DEBUG"

      - name: Download github-runner Charm
        uses: actions/download-artifact@v3
        with:
          name: github-runner_ubuntu-22.04-amd64.charm

      - run: ls -lah

      - name: Deploy github-runner Charm
        run: |
          cp github-runner_ubuntu-22.04-amd64.charm /home/ubuntu/github-runner_ubuntu-22.04-amd64.charm
          juju deploy /home/ubuntu/github-runner_ubuntu-22.04-amd64.charm \
            e2e-i${{ github.run_id }}n${{ github.run_number }}r \
            --base ubuntu@22.04 \
            --config path=canonical/github-runner-operator \
            --config token=${{ secrets.E2E_TESTING_TOKEN }} \
            --config virtual-machines=1

      - name: Install GitHub Cli
        run: which gh || sudo apt install gh -y

      - name: Dispatch Workflow on Testing Runner
        env:
          GH_TOKEN: ${{ secrets.E2E_TESTING_TOKEN }}
        run: |
          MAIN_SHA=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ secrets.E2E_TESTING_REPO }}/git/ref/heads/main --jq .object.sha)

          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ secrets.E2E_TESTING_REPO }}/git/refs \
            -f ref='refs/heads/e2e-i${{ github.run_id }}n${{ github.run_number }}r' \
            -f sha=$MAIN_SHA

          gh workflow run test.yaml \
            -R ${{ secrets.E2E_TESTING_REPO }} \
            --ref e2e-i${{ github.run_id }}n${{ github.run_number }}r \
            -f runner=e2e-i${{ github.run_id }}n${{ github.run_number }}r
          
          sleep 5
          
          gh run list 
            -R ${{ secrets.E2E_TESTING_REPO }} \
            -L 100 \
            --json headBranch,status,workflowDatabaseId \
            | jq '.[] | select(.headBranch=="e2e-i${{ github.run_id }}n${{ github.run_number }}r")'

          get-workflow-status() {
              output=$(gh run list 
                        -R ${{ secrets.E2E_TESTING_REPO }} \
                        -L 100 \
                        --json headBranch,status \
                        | jq '[.[] | select(.headBranch=="e2e-i${{ github.run_id }}n${{ github.run_number }}r")]')

              if [ $(echo "$output" | jq 'length') -eq 0 ]
              then
                  echo "not-started"
              else
                  # Parse output with jq to get the status field of the first object
                  status=$(echo "$output" | jq -r '.[0].status')
                  echo "$status"
              fi
          }

          juju debug-log &

          for i in {1..1200}
          do
              echo workflow status: $(get-workflow-status)
              sleep 3
          done; kill $(jobs -p) &
