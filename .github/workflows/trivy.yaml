name: Security Scan

on:
  push:
    branches: [main]
  pull_request:
  workflow_call:
    inputs:
      upload_sarif:
        description: 'Upload SARIF results to GitHub Security tab'
        required: true
        type: boolean
        default: false


## TODO: To be moved into inputs
env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}
  INPUT_BUILD_RUNNER_LABEL: "ubuntu-latest"
  INPUT_IDENTIFIER: ""
  INPUT_UPLOAD_IMAGE: ""
  INPUT_WORKING_DIRECTORY: "./"
  INPUT_rockcraft-enable-security-nesting: false
  INPUT_charmcraftcache: false
  INPUT_charmcraft-channel: "latest/stable"
  INPUT_rockcraft-channel: "latest/stable"
  INPUT_rockcraft-ref: ""
  INPUT_rockcraft-repository: ""

jobs:
  plan:
    name: Plan
    runs-on: $INPUT_BUILD_RUNNER_LABEL
    outputs:
      plan: ${{ steps.plan.outputs.plan }}
      has-code-changes: ${{ steps.changes.outputs.has_code_changes }}
    steps:
      - name: Validate input
        run: |
          # exit if runs-on and self-hosted-runner is both set
            if [ -n "${{ inputs.runs-on }}" ] && [ "${{ inputs.self-hosted-runner }}" = "true" ]; then
                echo "::error Both runs-on and self-hosted-runner cannot be set at the same time."
                exit 1
            fi
      - uses: actions/checkout@v4.2.2
        with:
            fetch-depth: 0
      - uses: canonical/operator-workflows/internal/plan@main
        id: plan
        with:
          identifier: $INPUT_IDENTIFIER
          upload-image: $INPUT_UPLOAD_IMAGE
          working-directory: $INPUT_WORKING_DIRECTORY
      - name: Find changes
        id: changes
        run: |
          REMOTE=$(git remote show)
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE_REF="$REMOTE/${{ github.event.pull_request.base.ref }}"
            HEAD_REF="${{ github.event.pull_request.head.sha }}"
          else
            # fallback for push events
            BASE_REF="${{ github.event.before }}"
            HEAD_REF="${{ github.sha }}"
          fi

          echo "Comparing $BASE_REF to $HEAD_REF"

          CHANGED_FILES=$(git diff --name-only "$BASE_REF" "$HEAD_REF" || echo "")
          CODE_FILE_CHANGES=$(echo "$CHANGED_FILES" | grep -v "\.md$" | wc -l)
          echo "has_code_changes=$([[ $CODE_FILE_CHANGES -eq "0" ]] && echo 'False' || echo 'True')" >> $GITHUB_OUTPUT


  build:
    name: Build ${{ matrix.build.type }} (${{ matrix.build.name }})
    needs: [ plan ]
    if: ${{ needs.plan.outputs.has-code-changes == 'True' }}
    runs-on: $INPUT_BUILD_RUNNER_LABEL
    strategy:
      matrix:
        build: ${{ fromJSON(needs.plan.outputs.plan).build }}
    steps:
      - uses: canonical/setup-lxd@v0.1.3
      - name: Set LXC security nesting
        if: $INPUT_rockcraft-enable-security-nesting
        run: |
          lxc profile set default security.nesting true
      - name: Install charmcraftcache
        if: $INPUTS_charmcraftcache
        run: |
          pipx install charmcraftcache
      - uses: actions/checkout@v4.2.2
      - uses: canonical/operator-workflows/internal/build@main
        id: build
        with:
          build-plan: ${{ toJSON(matrix.build) }}
          charmcraftcache: $INPUTS_charmcraftcache
          charmcraft-channel: $INPUT_charmcraft-channel
          github-token: ${{ secrets.GITHUB_TOKEN }}
          rockcraft-channel: $INPUT_rockcraft-channel
          rockcraft-ref: $INPUT_rockcraft-ref
          rockcraft-repository: $INPUT_rockcraft-repository

  plan-scan:
    name: Plan Image Scanning
    runs-on: $INPUT_BUILD_RUNNER_LABEL
    needs: [ build, plan ]
    outputs:
      scans: ${{ steps.plan-scan.outputs.scans }}
    steps:
      - uses: canonical/operator-workflows/internal/plan-scan@main
        id: plan-scan
        with:
          plan: ${{ needs.plan.outputs.plan }}

  scan:
    name: Scan Image (${{ matrix.scan.file }})
    runs-on: ${{ inputs.builder-runner-label }}
    needs: [ build, plan-scan ]
    if: ${{ needs.plan-scan.outputs.scans != '[]' }}
    strategy:
      matrix:
        scan: ${{ fromJSON(needs.plan-scan.outputs.scans) }}
    steps:
      - uses: actions/checkout@v4.2.2
      - name: Change directory
        run: |
          TEMP_DIR=$(mktemp -d)
          cp -rp ./${{ inputs.working-directory }}/. $TEMP_DIR
          rm -rf .* * || :
          cp -rp $TEMP_DIR/. .
          rm -rf $TEMP_DIR
          ls -lah
      - uses: actions/download-artifact@v4.3.0
        if: matrix.scan.artifact != ''
        with:
          name: ${{ matrix.scan.artifact }}
      - if: endsWith( matrix.scan.file, '.rock')
        run: |
          skopeo copy oci-archive:${{ matrix.scan.file }} docker-archive:${{ matrix.scan.file }}.tar
          mv ${{ matrix.scan.file }}.tar ${{ matrix.scan.file }}
      - uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - if: matrix.scan.image != ''
        run: |
          docker image pull ${{ matrix.scan.image }}
          docker image save -o ${{ matrix.scan.file }} ${{ matrix.scan.image }}
      - name: Run Github Trivy Image Action
        uses: aquasecurity/trivy-action@0.32.0
        with:
          input: ${{ matrix.scan.file }}
          trivy-config: ${{ inputs.trivy-image-config }}
          exit-code: '1'
          severity: ${{ inputs.trivy-severity-config }}
        env:
          TRIVY_DISABLE_VEX_NOTICE: true
      - name: Check trivyignore
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.46.0
          if [ -f ".trivyignore" ]
          then
            output=$(trivy image $ROCK_IMAGE --severity ${{ inputs.trivy-severity-config }} -q -f json --ignorefile "" | jq -r '.Results[].Vulnerabilities[].VulnerabilityID' 2>/dev/null || echo "No vulnerabilities found")
            line=0
            while read CVE;
            do
              line=$(( line + 1 ))
              if [[ "$output" != *"$CVE"* ]] && [[ ! "$CVE" =~ ^#.* ]]
              then
              echo "::notice file=.trivyignore,line=${line}::$CVE not present anymore, can be safely removed."
              fi
            done < .trivyignore
          fi
        env:
          TRIVY_USERNAME: ${{ github.actor }}
          TRIVY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
          ROCK_IMAGE: ${{ env.IMAGE_REF }}

  trivy-scan:
    name: Run Trivy Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    env:
      IMAGE_NAME: ghcr.io/${{ github.repository }}:trivy-scan-${{ github.sha }}

    steps:
      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-rock.outputs.image-name }}
          format: table
          severity: CRITICAL,HIGH
          exit-code: 0
          ignore-unfixed: true

      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy-results.sarif

      # Optional: SBOM placeholder
      - name: Generate SBOM (cyclonedx or syft)
        run: |
          echo "SBOM generation step"
          # e.g., syft $IMAGE_NAME -o cyclonedx-json > sbom.json
