# Copyright 2025 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
skipsdist = True
skip_missing_interpreters = True
envlist = lint, unit, static, coverage-report

[vars]
src_path = {toxinidir}/src/
tst_path = {toxinidir}/tests/
scripts_path = {toxinidir}/scripts/
github_runner_manager_path = {toxinidir}/github-runner-manager/
all_path = {[vars]src_path} {[vars]tst_path} {[vars]scripts_path}


[testenv]
basepython = python3.10
setenv =
    PYTHONPATH={toxinidir}:{toxinidir}/lib:{toxinidir}/src
    PYTHONBREAKPOINT=ipdb.set_trace
    PY_COLOR=1
passenv =
  PYTHONPATH
  CHARM_BUILD_DIR
  MODEL_SETTINGS

[testenv:fmt]
description = Apply coding style standards to code
deps =
    black
    isort
commands =
    isort {[vars]all_path}
    black {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
deps =
    -r{toxinidir}/requirements.txt
    black
    flake8
    flake8-docstrings>=1.6
    flake8-builtins>=2.0
    flake8-docstrings-complete>=1.0.3
    flake8-test-docs>=1.0
    pyproject-flake8
    pep8-naming
    isort
    codespell
    toml
    mypy
    pylint
    pytest
    ops
    pytest_operator
    # types for dateutil lib in integration tests
    types-python-dateutil
    types-requests
    types-PyYAML
    types-paramiko
    pytest_asyncio
    pydocstyle>=2.10
commands =
    pydocstyle {[vars]src_path}
    codespell {toxinidir} --skip {toxinidir}/.git --skip {toxinidir}/.tox \
      --skip {toxinidir}/build --skip {toxinidir}/lib --skip {toxinidir}/venv \
      --skip {toxinidir}/.mypy_cache --skip {toxinidir}/icon.svg \
      --ignore-words {toxinidir}/.codespellignore
    # pflake8 wrapper supports config from pyproject.toml
    pflake8 {[vars]all_path}
    isort --check-only --diff {[vars]all_path}
    black --check --diff {[vars]all_path}
    mypy {[vars]all_path}
    pylint {[vars]src_path} {[vars]scripts_path}
    pydocstyle {[vars]src_path} {[vars]scripts_path}

[testenv:unit]
description = Run unit tests
deps =
    pytest
    requests-mock
    factory-boy
    coverage[toml]
    -r{toxinidir}/requirements.txt
    -r{[vars]tst_path}unit/requirements.txt
commands =
    coverage run --source={[vars]src_path} \
        -m pytest --ignore={[vars]github_runner_manager_path} --ignore={[vars]tst_path}integration -v --tb native -s {posargs}
    coverage report

[testenv:coverage-report]
description = Create test coverage report
deps =
    pytest
    coverage[toml]
    -r{toxinidir}/requirements.txt
commands =
    coverage report

[testenv:static]
description = Run static analysis tests
deps =
    bandit[toml]
    -r{toxinidir}/requirements.txt
commands =
    bandit -c {toxinidir}/pyproject.toml -r {[vars]src_path}

[testenv:integration-juju{3.1,3.6}]
description = Run integration tests
pass_env =
    PYTEST_ADDOPTS
    INTEGRATION_OPENSTACK_PASSWORD_AMD64
    INTEGRATION_TOKEN
    INTEGRATION_TOKEN_ALT
deps =
    juju3.1: juju==3.1.*
    juju3.6: juju==3.6.*
    nest-asyncio # Required due to https://github.com/pytest-dev/pytest-asyncio/issues/112
    pytest-operator
    pytest-asyncio
    websockets<14.0 # https://github.com/juju/python-libjuju/issues/1184
    -r{toxinidir}/requirements.txt
    git+https://github.com/canonical/data-platform-workflows@v24.0.0\#subdirectory=python/pytest_plugins/allure_pytest_collection_report
    -r{[vars]tst_path}integration/requirements.txt
commands =
    pytest -v --tb native --ignore={[vars]github_runner_manager_path} --ignore={[vars]tst_path}unit --log-cli-level=INFO -s {posargs}

[testenv:src-docs]
allowlist_externals=sh
description = Generate documentation for src
deps =
    lazydocs
    -r{toxinidir}/requirements.txt
commands =
    ; can't run lazydocs directly due to needing to run it on src/* which produces an invocation error in tox
    sh generate-src-docs.sh
