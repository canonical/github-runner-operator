#!/usr/bin/env bash

timestamp=$(date +%s)

# Disable exit-on-error, due the need for error handling.
set +e

{% if issue_metrics %}
jq -n \
  --arg workflow "$GITHUB_WORKFLOW" \
  --arg repository "$GITHUB_REPOSITORY" \
  --arg event "$GITHUB_EVENT_NAME" \
  --argjson timestamp "$timestamp" \
  --arg workflow_run_id "$GITHUB_RUN_ID" \
  '{
    "workflow": $workflow,
    "repository": $repository,
    "event": $event,
    "timestamp": $timestamp,
    "workflow_run_id": $workflow_run_id
  }' > /metrics-exchange/pre-job-metrics.json || true
{% endif %}


# Log common env variables.
logger -s "GITHUB_EVENT_NAME: ${GITHUB_EVENT_NAME}, \
  GITHUB_REPOSITORY: ${GITHUB_REPOSITORY}, \
  GITHUB_SHA: ${GITHUB_SHA}"

# Prepare curl arguments
CURL_ARGS=(
  --silent
  --show-error
  --max-time 60
  --noproxy '*'
  --fail-with-body
  -H 'Authorization: Bearer {{one_time_token}}'
  -H 'Content-Type: application/json'
)

# Set REPO_CHECK to a failure code as a safe guard.
REPO_CHECK=1

# Workflow dispatch, Push and Schedule - Request repo-policy-compliance service check:
if [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]] || [[ "${GITHUB_EVENT_NAME}" == "push" ]] || [[ "${GITHUB_EVENT_NAME}" == "schedule" ]]; then

  logger -s "GITHUB_REF_NAME: ${GITHUB_REF_NAME}"

  curl "${CURL_ARGS[@]}" \
      -d "{\"repository_name\": \"${GITHUB_REPOSITORY}\", \"branch_name\": \"${GITHUB_REF_NAME}\", \"commit_sha\": \"${GITHUB_SHA}\"}" \
      http://{{host_ip}}:8080/${GITHUB_EVENT_NAME}/check-run &> repo_check_output.txt
  REPO_CHECK=$?

# Pull request - Request repo-policy-compliance service check:
elif [[ "${GITHUB_EVENT_NAME}" ==  "pull_request" ]]; then

  GITHUB_SOURCE_REPOSITORY=$(cat "${GITHUB_EVENT_PATH}" | jq -r '.pull_request.head.repo.full_name')
  COMMIT_SHA=$(cat "${GITHUB_EVENT_PATH}" | jq -r '.pull_request.head.sha')

  logger -s " \
  GITHUB_SOURCE_REPOSITORY: ${GITHUB_SOURCE_REPOSITORY} \
  GITHUB_BASE_REF: ${GITHUB_BASE_REF}, \
  GITHUB_HEAD_REF: ${GITHUB_HEAD_REF}, \
  COMMIT_SHA: ${COMMIT_SHA}"

  curl "${CURL_ARGS[@]}" \
      -d "{\"repository_name\": \"${GITHUB_REPOSITORY}\", \"source_repository_name\": \"${GITHUB_SOURCE_REPOSITORY}\", \"target_branch_name\": \"${GITHUB_BASE_REF}\", \"source_branch_name\": \"${GITHUB_HEAD_REF}\", \"commit_sha\": \"${COMMIT_SHA}\"}" \
      http://{{host_ip}}:8080/pull_request/check-run &> repo_check_output.txt
  REPO_CHECK=$?

else

  logger -p user.error -s "${GITHUB_EVENT_NAME} is not supported yet. Please request it to be added on https://github.com/canonical/github-runner-operator/issues/new/choose"

  REPO_CHECK=1

fi

if [[ $REPO_CHECK -ne 0 ]]; then
  logger -p user.error -s -f repo_check_output.txt
  logger -p user.error -s "Stopping execution of jobs due to repository setup is not compliant with policies."
  logger -p user.error -s "This runner will be stopped or lost, please fix the setup of the repository, then rerun this job."

  # Killing the runner.Listener process to stop the runner application. This will prevent jobs from being executed.
  pkill -2 Runner.Listener

  # Shutdown the instance as a safe guard. The time delay is needed for the runner application to upload the logs.
  bash -c "sleep 10; sudo systemctl poweroff -i" &

  exit 1

fi

logger -s "The repository setup check has passed, proceeding to execute jobs"
