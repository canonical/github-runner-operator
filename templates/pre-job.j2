#!/usr/bin/env bash

timestamp=$(date +%s)

# Disable exit-on-error, due the need for error handling.
set +e

{% if issue_metrics %}
jq -n \
  --arg workflow "$GITHUB_WORKFLOW" \
  --arg repository "$GITHUB_REPOSITORY" \
  --arg event "$GITHUB_EVENT_NAME" \
  --argjson timestamp "$timestamp" \
  --arg workflow_run_id "$GITHUB_RUN_ID" \
  '{
    "workflow": $workflow,
    "repository": $repository,
    "event": $event,
    "timestamp": $timestamp,
    "workflow_run_id": $workflow_run_id
  }' > "{{ metrics_exchange_path }}/pre-job-metrics.json" || true
{% endif %}

{% if do_repo_policy_check %}

    # Log common env variables.
    logger -s "GITHUB_EVENT_NAME: ${GITHUB_EVENT_NAME}, \
      GITHUB_REPOSITORY: ${GITHUB_REPOSITORY}, \
      GITHUB_SHA: ${GITHUB_SHA}"

    # Prepare curl arguments
    CURL_ARGS=(
      --silent
      --show-error
      --max-time 60
      --noproxy '*'
      --fail-with-body
      -o repo_check_output.txt
      --stderr repo_check_error.txt
      --write-out "%{http_code}"
      -H 'Authorization: Bearer {{repo_policy_one_time_token}}'
      -H 'Content-Type: application/json'
    )

    # Set REPO_CHECK to a failure code as a safe guard.
    REPO_CHECK=1

    # Special Workflow dispatch repo-policy-compliance service check designed to fail:
    if [[ "${GITHUB_WORKFLOW}" == "Workflow Dispatch Failure Tests 2a34f8b1-41e4-4bcb-9bbf-7a74e6c482f7" ]]; then
      logger -s "Running the test workflow for integration tests, this test is configured to fail"

      REPO_CHECK_HTTP_CODE=$(curl "${CURL_ARGS[@]}" \
          -X POST \
          {{repo_policy_base_url}}/always-fail/check-run)
      REPO_CHECK=$?

    # Pull request - Request repo-policy-compliance service check:
    elif [[ "${GITHUB_EVENT_NAME}" ==  "pull_request" ]]; then

      GITHUB_SOURCE_REPOSITORY=$(cat "${GITHUB_EVENT_PATH}" | jq -r '.pull_request.head.repo.full_name')
      COMMIT_SHA=$(cat "${GITHUB_EVENT_PATH}" | jq -r '.pull_request.head.sha')

      logger -s " \
      GITHUB_SOURCE_REPOSITORY: ${GITHUB_SOURCE_REPOSITORY} \
      GITHUB_BASE_REF: ${GITHUB_BASE_REF}, \
      GITHUB_HEAD_REF: ${GITHUB_HEAD_REF}, \
      COMMIT_SHA: ${COMMIT_SHA}"

      REPO_CHECK_HTTP_CODE=$(curl "${CURL_ARGS[@]}" \
          -d "{\"repository_name\": \"${GITHUB_REPOSITORY}\", \"source_repository_name\": \"${GITHUB_SOURCE_REPOSITORY}\", \"target_branch_name\": \"${GITHUB_BASE_REF}\", \"source_branch_name\": \"${GITHUB_HEAD_REF}\", \"commit_sha\": \"${COMMIT_SHA}\"}" \
          {{repo_policy_base_url}}/pull_request/check-run)
      REPO_CHECK=$?

    else
      # Workflow dispatch, Push and Schedule use their respective endpoints, all other events use default by default.
      CHECK_NAME="default"
      if [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]] || [[ "${GITHUB_EVENT_NAME}" == "push" ]] || [[ "${GITHUB_EVENT_NAME}" == "schedule" ]]; then
        CHECK_NAME="${GITHUB_EVENT_NAME}"
      fi

      logger -s "GITHUB_REF_NAME: ${GITHUB_REF_NAME}"

      REPO_CHECK_HTTP_CODE=$(curl "${CURL_ARGS[@]}" \
          -d "{\"repository_name\": \"${GITHUB_REPOSITORY}\"}" \
          {{repo_policy_base_url}}/${CHECK_NAME}/check-run)
      REPO_CHECK=$?

    fi

    if [[ $REPO_CHECK -ne 0 ]]; then
        if [[ -s repo_check_output.txt ]]; then
            logger -p user.error -s -f repo_check_output.txt
        fi
        if [[ -s repo_check_error.txt ]]; then
            logger -p user.error -s -f repo_check_error.txt
        fi
        if [[ $REPO_CHECK_HTTP_CODE -ge 500 ]] && [[ $REPO_CHECK_HTTP_CODE -lt 600 ]]; then
            logger -p user.error -s "The repository setup check failed with HTTP code ${REPO_CHECK_HTTP_CODE}."
            logger -p user.error -s "This runner will be stopped or lost, please contact the repo-policy-compliance server operators or try again later."
        else
            logger -p user.error -s "Stopping execution of jobs due to repository setup is not compliant with policies."
            logger -p user.error -s "This runner will be stopped or lost, please fix the setup of the repository, then rerun this job."
        fi

        # Killing the runner.Listener process to stop the runner application. This will prevent jobs from being executed.
        pkill -2 Runner.Listener


        {% if issue_metrics %}
            # Write Post Job metrics with status "repo-policy-check-failure" .
            # We write it here, rather than relying on the post-job script,
            # as it may not run due to the poweroff command below.
            post_job_timestamp=$(date +%s)

            jq -n \
              --argjson timestamp "$post_job_timestamp" \
              --argjson http_code "$REPO_CHECK_HTTP_CODE" \
              '{
                "timestamp": $timestamp,
                "status": "repo-policy-check-failure",
                "status_info": {code: $http_code}
              }' > "{{ metrics_exchange_path }}/post-job-metrics.json" || true
        {% endif %}

      # Shutdown the instance as a safe guard. The time delay is needed for the runner application to upload the logs.
      bash -c "sleep 10; sudo systemctl poweroff -i" &

      exit 1

    fi

    logger -s "The repository setup check has passed, proceeding to execute jobs"
{% endif %}

if [[ -n "$DOCKERHUB_MIRROR" ]]; then
  logger -s "A private docker registry is setup as a dockerhub mirror for this self-hosted runner."
  logger -s "The docker daemon on this self-hosted runner is configured to use the dockerhub mirror."
  logger -s "The URL to the private docker registry is in the DOCKERHUB_MIRROR environment variable."
  logger -s "For microk8s, see instructions here: https://microk8s.io/docs/dockerhub-limits"
fi
