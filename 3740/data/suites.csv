"DESCRIPTION","DURATION IN MS","NAME","PARENT SUITE","START TIME","STATUS","STOP TIME","SUB SUITE","SUITE","TEST CLASS","TEST METHOD"
"
    arrange: given a prometheus charm application.
    act: when GitHub runner is integrated.
    assert: the datasource is registered and basic metrics are available.
    ","0","test_prometheus_metrics","tests.integration","2025-10-08","broken","2025-10-08","","test_prometheus_metrics","",""
"
    arrange: A working application with two runners.
    act:
        1. Run Check_runner action. Record the runner names for later.
        2. Flush runners.
        3. Dispatch a workflow to make runner busy and call flush_runner action.

    assert:
        1. Two runner exists.
        2. Runners are recreated.
        3. The runner is not flushed since by default it flushes idle.

    Test are combined to reduce number of runner spawned.
    ","0","test_flush_runner_and_resource_config","tests.integration","2025-10-08","broken","2025-10-08","","test_charm_runner","",""
"
    arrange: Scale down the number of virtual machines to 2 and spawn a job.
    act:
        1. Scale down the number of virtual machines to 0 and call reconcile.
        2. Spawn a job.
    assert:
        1. The job fails.
        2. The job is queued and there is a message in the queue.
    ","0","test_reactive_mode_scale_down","tests.integration","2025-10-08","broken","2025-10-08","","test_reactive","",""
"
    arrange: A working application with no runners.
    act:
        1. Check the github runner manager service.
        2. Force a logrotate
    assert:
        1. The service should be running, and logs generated.
        2. New lines of log should be found, the initialize logs should not be found.
    ","0","test_manager_service_started","tests.integration","2025-10-08","broken","2025-10-08","","test_charm_no_runner","",""
"
    arrange: A properly integrated charm with a runner registered on the fork repo.
    act: Dispatch a test workflow that fails the repo-policy check. After completion, reconcile.
    assert: The RunnerStart, RunnerStop and Reconciliation metric is logged.
        The Reconciliation metric has the post job status set to failure.
    ","0","test_charm_issues_metrics_for_failed_repo_policy","tests.integration","2025-10-08","broken","2025-10-08","","test_charm_metrics_failure","",""
"
    arrange: A working application with one runner.
    act: Run check_runner action.
    assert: Action returns result with one runner.
    ","0","test_check_runner","tests.integration","2025-10-08","broken","2025-10-08","","test_charm_runner","",""
"
    arrange: A working application with one runner with a custom pre-job script enabled.
    act: Dispatch a workflow.
    assert: Workflow run successfully passed and pre-job script has been executed.
    ","0","test_custom_pre_job_script","tests.integration","2025-10-08","broken","2025-10-08","","test_charm_runner","",""
"
    arrange: A working application with no runners.
    act: Run check-runners action.
    assert: Action returns result with no runner.
    ","0","test_check_runners_no_runners","tests.integration","2025-10-08","broken","2025-10-08","","test_charm_no_runner","",""
"
    arrange: A working application with no runners.
    act:
        1.  a. Set virtual-machines config to 1.
        2.  a. Set virtual-machines config to 0.
    assert:
        1. One runner should exist.
        2. No runner should exist.

    The two test is combine to maintain no runners in the application after the
    test.
    ","0","test_reconcile_runners","tests.integration","2025-10-08","broken","2025-10-08","","test_charm_no_runner","",""
"
    arrange: A properly integrated charm with a runner registered on the fork repo.
    act: Dispatch a workflow on a branch for the runner to run. After completion, reconcile.
    assert: The RunnerStart, RunnerStop and Reconciliation metric is logged.
        The Reconciliation metric has the post job status set to normal.
    ","0","test_charm_issues_metrics_after_reconciliation","tests.integration","2025-10-08","broken","2025-10-08","","test_charm_metrics_success","",""
"
    arrange: A charm integrated with grafana-agent using the cos-agent integration.
    act: Config the charm to contain one runner.
    assert: The RunnerInstalled metric is logged.
    ","0","test_charm_issues_runner_installed_metric","tests.integration","2025-10-08","broken","2025-10-08","","test_charm_metrics_success","",""
"
    arrange: Place a message with an unsupported label in the queue and dispatch a workflow.
    act: Call reconcile.
    assert: No runner is spawned and the message is not requeued.
    ","0","test_reactive_mode_does_not_consume_jobs_with_unsupported_labels","tests.integration","2025-10-08","broken","2025-10-08","","test_reactive","",""
"
    arrange: Place a message in the queue and dispatch a workflow.
    act: Call reconcile.
    assert: A runner is spawned to process the job and the message is removed from the queue.
        The metrics are logged.
    ","0","test_reactive_mode_spawns_runner","tests.integration","2025-10-08","broken","2025-10-08","","test_reactive","",""
"
    This is a full test for the happy path of the jobmanager.

    A fake http server will simulate all interactions with the jobmanager.

    The main steps in this test are:
     1. Change config to spawn a runner.
     2. The github-runner manager will register a runner on the jobmanager.
     3. The jobmanager will return a health response with ""PENDING"" status and not deletable.
     4. A tunnel will be prepared in the test so the reactive runner can get to the jobmanager.
        This is specific to this test and in production it should not be needed.
     5. After some time, the runner will hit the jobmanager health endpoint indicating
        IDLE status.
     6. The jobmanager will change the health response to ""IN_PROGRESS"" and will send a job
        to the builder-agent. The job will be a sleep 30 seconds.
     7. The builder-agent will run the job. While running the job it will send the status
        EXECUTING and after it is finished it will send the status FINISHED.
     8. Run reconcile in the github-runner manager. As the jobmanager fake health response is
        still ""IN_PROGRESS"" and not deletable, the runner should not be deleted.
     9. Change the health response from the fake jobmanager to reply COMPLETED and deletable.
     10. Run reconcile in the github-runner manager. The runner should be deleted at this point.
    ","0","test_jobmanager","tests.integration.jobmanager","2025-10-08","broken","2025-10-08","","test_jobmanager_prespawned","",""
"
    arrange: Place a message in the queue with a non-existent job url.
    act: Call reconcile.
    assert: The message is removed from the queue.
    ","0","test_reactive_mode_with_not_found_job","tests.integration","2025-10-08","broken","2025-10-08","","test_reactive","",""
"
    arrange: given an integrated GitHub-Runner charm and tmate-ssh-server charm.
    act: when canonical/action-tmate is triggered.
    assert: the ssh connection info from action-log and tmate-ssh-server matches.
    ","0","test_ssh_debug","tests.integration","2025-10-08","broken","2025-10-08","","test_debug_ssh","",""
"
    arrange: A working application with one runner in a forked repository.
    act: Change the path configuration to the main repository and reconcile runners.
    assert: No runners connected to the forked repository and one runner in the main repository.
    ","0","test_path_config_change","tests.integration","2025-10-08","broken","2025-10-08","","test_charm_fork_path_change","",""
"
    Test reactive mode together with jobmanager.

    Test that after putting a job in the queue that the runner is registered and the
    job is picked up.

    So,
    1. Put job in the queue
    2. Wait for runner to be registered
    3. Wait for reactive process to ask for job status
    4. Mark job deletable
    5. Reconcile
    6. Assert queue is empty
    ","0","test_jobmanager_reactive","tests.integration.jobmanager","2025-10-08","broken","2025-10-08","","test_jobmanager_reactive","",""
"
    arrange:         1. A forked repository.         2. A working application using repo-policy checks with one runner on the forked repository.
    act: Trigger a workflow dispatch that fails the repo policy check on a branch
     in the forked repository.
    assert: The workflow that was dispatched failed and the reason is logged.
    ","0","test_dispatch_workflow_failure","tests.integration","2025-10-08","broken","2025-10-08","","test_charm_fork_repo","",""
"
    arrange: given latest stable version of the charm.
    act: charm upgrade is called.
    assert: the charm is upgraded successfully.
    ","1522356","test_charm_upgrade","tests.integration","2025-10-08","broken","2025-10-08","","test_charm_upgrade","",""
"
    arrange: A properly integrated charm with a runner registered on the fork repo.
    act: Dispatch a test workflow and afterwards kill run.sh. After that, reconcile.
    assert: The RunnerStart, RunnerStop and Reconciliation metric is logged.
        The Reconciliation metric has the post job status set to Abnormal.
    ","0","test_charm_issues_metrics_for_abnormal_termination","tests.integration","2025-10-08","broken","2025-10-08","","test_charm_metrics_failure","",""
"
    arrange: A working application with one runner with repo policy enabled.
    act: Dispatch a workflow.
    assert: Workflow run successfully passed.
    ","0","test_repo_policy_enabled","tests.integration","2025-10-08","broken","2025-10-08","","test_charm_runner","",""
