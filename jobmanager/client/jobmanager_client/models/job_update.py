# coding: utf-8

"""
    Job Manager API

    A modern job management system

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, List, Optional
from pydantic import BaseModel, StrictStr, conlist

class JobUpdate(BaseModel):
    """
    Job update model.  # noqa: E501
    """
    status: Optional[StrictStr] = None
    vm_ip: Optional[StrictStr] = None
    artifact_urls: Optional[conlist(Any)] = None
    log_urls: Optional[conlist(Any)] = None
    started_at: Optional[datetime] = None
    completed_at: Optional[datetime] = None
    __properties = ["status", "vm_ip", "artifact_urls", "log_urls", "started_at", "completed_at"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> JobUpdate:
        """Create an instance of JobUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if status (nullable) is None
        # and __fields_set__ contains the field
        if self.status is None and "status" in self.__fields_set__:
            _dict['status'] = None

        # set to None if vm_ip (nullable) is None
        # and __fields_set__ contains the field
        if self.vm_ip is None and "vm_ip" in self.__fields_set__:
            _dict['vm_ip'] = None

        # set to None if artifact_urls (nullable) is None
        # and __fields_set__ contains the field
        if self.artifact_urls is None and "artifact_urls" in self.__fields_set__:
            _dict['artifact_urls'] = None

        # set to None if log_urls (nullable) is None
        # and __fields_set__ contains the field
        if self.log_urls is None and "log_urls" in self.__fields_set__:
            _dict['log_urls'] = None

        # set to None if started_at (nullable) is None
        # and __fields_set__ contains the field
        if self.started_at is None and "started_at" in self.__fields_set__:
            _dict['started_at'] = None

        # set to None if completed_at (nullable) is None
        # and __fields_set__ contains the field
        if self.completed_at is None and "completed_at" in self.__fields_set__:
            _dict['completed_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> JobUpdate:
        """Create an instance of JobUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return JobUpdate.parse_obj(obj)

        _obj = JobUpdate.parse_obj({
            "status": obj.get("status"),
            "vm_ip": obj.get("vm_ip"),
            "artifact_urls": obj.get("artifact_urls"),
            "log_urls": obj.get("log_urls"),
            "started_at": obj.get("started_at"),
            "completed_at": obj.get("completed_at")
        })
        return _obj


