# coding: utf-8

"""
    Job Manager API

    A modern job management system

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from jobmanager_client.models.vm_dependencies import VmDependencies

class JobRead(BaseModel):
    """
    Job read model with all fields.  # noqa: E501
    """
    requested_by: StrictStr = Field(...)
    repository_url: Optional[StrictStr] = None
    repository_ref: Optional[StrictStr] = None
    architecture: StrictStr = Field(...)
    base_series: StrictStr = Field(...)
    vm_dependencies: Optional[VmDependencies] = None
    commands: Optional[conlist(Any)] = None
    secrets: Optional[Dict[str, Any]] = None
    environment: Optional[Dict[str, Any]] = None
    artifacts_dir: Optional[StrictStr] = None
    topology: Optional[StrictStr] = None
    vm_ip: Optional[StrictStr] = None
    vm_size: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    artifact_urls: Optional[conlist(Any)] = None
    log_urls: Optional[conlist(Any)] = None
    id: StrictInt = Field(...)
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    started_at: Optional[datetime] = None
    completed_at: Optional[datetime] = None
    __properties = ["requested_by", "repository_url", "repository_ref", "architecture", "base_series", "vm_dependencies", "commands", "secrets", "environment", "artifacts_dir", "topology", "vm_ip", "vm_size", "status", "artifact_urls", "log_urls", "id", "created_at", "updated_at", "started_at", "completed_at"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> JobRead:
        """Create an instance of JobRead from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of vm_dependencies
        if self.vm_dependencies:
            _dict['vm_dependencies'] = self.vm_dependencies.to_dict()
        # set to None if repository_url (nullable) is None
        # and __fields_set__ contains the field
        if self.repository_url is None and "repository_url" in self.__fields_set__:
            _dict['repository_url'] = None

        # set to None if repository_ref (nullable) is None
        # and __fields_set__ contains the field
        if self.repository_ref is None and "repository_ref" in self.__fields_set__:
            _dict['repository_ref'] = None

        # set to None if vm_dependencies (nullable) is None
        # and __fields_set__ contains the field
        if self.vm_dependencies is None and "vm_dependencies" in self.__fields_set__:
            _dict['vm_dependencies'] = None

        # set to None if commands (nullable) is None
        # and __fields_set__ contains the field
        if self.commands is None and "commands" in self.__fields_set__:
            _dict['commands'] = None

        # set to None if secrets (nullable) is None
        # and __fields_set__ contains the field
        if self.secrets is None and "secrets" in self.__fields_set__:
            _dict['secrets'] = None

        # set to None if environment (nullable) is None
        # and __fields_set__ contains the field
        if self.environment is None and "environment" in self.__fields_set__:
            _dict['environment'] = None

        # set to None if artifacts_dir (nullable) is None
        # and __fields_set__ contains the field
        if self.artifacts_dir is None and "artifacts_dir" in self.__fields_set__:
            _dict['artifacts_dir'] = None

        # set to None if topology (nullable) is None
        # and __fields_set__ contains the field
        if self.topology is None and "topology" in self.__fields_set__:
            _dict['topology'] = None

        # set to None if vm_ip (nullable) is None
        # and __fields_set__ contains the field
        if self.vm_ip is None and "vm_ip" in self.__fields_set__:
            _dict['vm_ip'] = None

        # set to None if vm_size (nullable) is None
        # and __fields_set__ contains the field
        if self.vm_size is None and "vm_size" in self.__fields_set__:
            _dict['vm_size'] = None

        # set to None if status (nullable) is None
        # and __fields_set__ contains the field
        if self.status is None and "status" in self.__fields_set__:
            _dict['status'] = None

        # set to None if artifact_urls (nullable) is None
        # and __fields_set__ contains the field
        if self.artifact_urls is None and "artifact_urls" in self.__fields_set__:
            _dict['artifact_urls'] = None

        # set to None if log_urls (nullable) is None
        # and __fields_set__ contains the field
        if self.log_urls is None and "log_urls" in self.__fields_set__:
            _dict['log_urls'] = None

        # set to None if created_at (nullable) is None
        # and __fields_set__ contains the field
        if self.created_at is None and "created_at" in self.__fields_set__:
            _dict['created_at'] = None

        # set to None if updated_at (nullable) is None
        # and __fields_set__ contains the field
        if self.updated_at is None and "updated_at" in self.__fields_set__:
            _dict['updated_at'] = None

        # set to None if started_at (nullable) is None
        # and __fields_set__ contains the field
        if self.started_at is None and "started_at" in self.__fields_set__:
            _dict['started_at'] = None

        # set to None if completed_at (nullable) is None
        # and __fields_set__ contains the field
        if self.completed_at is None and "completed_at" in self.__fields_set__:
            _dict['completed_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> JobRead:
        """Create an instance of JobRead from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return JobRead.parse_obj(obj)

        _obj = JobRead.parse_obj({
            "requested_by": obj.get("requested_by"),
            "repository_url": obj.get("repository_url"),
            "repository_ref": obj.get("repository_ref"),
            "architecture": obj.get("architecture"),
            "base_series": obj.get("base_series"),
            "vm_dependencies": VmDependencies.from_dict(obj.get("vm_dependencies")) if obj.get("vm_dependencies") is not None else None,
            "commands": obj.get("commands"),
            "secrets": obj.get("secrets"),
            "environment": obj.get("environment"),
            "artifacts_dir": obj.get("artifacts_dir"),
            "topology": obj.get("topology"),
            "vm_ip": obj.get("vm_ip"),
            "vm_size": obj.get("vm_size"),
            "status": obj.get("status"),
            "artifact_urls": obj.get("artifact_urls"),
            "log_urls": obj.get("log_urls"),
            "id": obj.get("id"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "started_at": obj.get("started_at"),
            "completed_at": obj.get("completed_at")
        })
        return _obj


