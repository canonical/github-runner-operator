# coding: utf-8

"""
    Job Manager API

    API for managing jobs and builders within the Job Manager system.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr, conlist, validator

class Job(BaseModel):
    """
    Job
    """
    job_id: Optional[StrictInt] = None
    requested_by: Optional[StrictStr] = None
    repository_url: Optional[StrictStr] = None
    repository_ref: Optional[StrictStr] = None
    architecture: Optional[StrictStr] = None
    base_series: Optional[StrictStr] = None
    vm_dependencies: Optional[Dict[str, Any]] = None
    commands: Optional[conlist(StrictStr)] = None
    secrets: Optional[Dict[str, Any]] = None
    environment: Optional[Dict[str, Any]] = None
    artifacts_dir: Optional[StrictStr] = None
    topology: Optional[StrictStr] = None
    vm_ip: Optional[StrictStr] = None
    vm_size: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    artifact_urls: Optional[conlist(StrictStr)] = None
    log_url: Optional[StrictStr] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    started_at: Optional[datetime] = None
    completed_at: Optional[datetime] = None
    __properties = ["job_id", "requested_by", "repository_url", "repository_ref", "architecture", "base_series", "vm_dependencies", "commands", "secrets", "environment", "artifacts_dir", "topology", "vm_ip", "vm_size", "status", "artifact_urls", "log_url", "created_at", "updated_at", "started_at", "completed_at"]

    @validator('vm_size')
    def vm_size_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('S', 'M', 'L',):
            raise ValueError("must be one of enum values ('S', 'M', 'L')")
        return value

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('PENDING', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CANCELLED',):
            raise ValueError("must be one of enum values ('PENDING', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CANCELLED')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Job:
        """Create an instance of Job from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Job:
        """Create an instance of Job from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Job.parse_obj(obj)

        _obj = Job.parse_obj({
            "job_id": obj.get("job_id"),
            "requested_by": obj.get("requested_by"),
            "repository_url": obj.get("repository_url"),
            "repository_ref": obj.get("repository_ref"),
            "architecture": obj.get("architecture"),
            "base_series": obj.get("base_series"),
            "vm_dependencies": obj.get("vm_dependencies"),
            "commands": obj.get("commands"),
            "secrets": obj.get("secrets"),
            "environment": obj.get("environment"),
            "artifacts_dir": obj.get("artifacts_dir"),
            "topology": obj.get("topology"),
            "vm_ip": obj.get("vm_ip"),
            "vm_size": obj.get("vm_size"),
            "status": obj.get("status"),
            "artifact_urls": obj.get("artifact_urls"),
            "log_url": obj.get("log_url"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "started_at": obj.get("started_at"),
            "completed_at": obj.get("completed_at")
        })
        return _obj


